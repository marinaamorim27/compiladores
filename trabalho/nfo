-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from Parser.y
-----------------------------------------------------------------------------

state 55 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Block                             (0)
	Block -> Stmt                                      (1)
	Block -> Block Stmt                                (2)
	Stmt -> Simple ';'                                 (3)
	Stmt -> '{' Block '}'                              (4)
	Stmt -> if '(' Exp ')' Stmt else Stmt              (5)
	Stmt -> if '(' Exp ')' Stmt                        (6)
	Stmt -> while '(' Exp ')' Stmt                     (7)
	Stmt -> return Exp ';'                             (8)
	Simple -> id '=' Exp                               (9)
	Simple -> Types id                                 (10)
	Types -> int                                       (11)
	Types -> bool                                      (12)
	Exp -> true                                        (13)
	Exp -> false                                       (14)
	Exp -> Exp '+' Exp                                 (15)
	Exp -> Exp '-' Exp                                 (16)
	Exp -> Exp '*' Exp                                 (17)
	Exp -> Exp '/' Exp                                 (18)
	Exp -> Exp '%' Exp                                 (19)
	Exp -> Exp "==" Exp                                (20)
	Exp -> Exp "!=" Exp                                (21)
	Exp -> Exp '<' Exp                                 (22)
	Exp -> Exp "<=" Exp                                (23)
	Exp -> Exp '>' Exp                                 (24)
	Exp -> Exp ">=" Exp                                (25)
	Exp -> '(' Exp ')'                                 (26)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	';'            { TokenSEMICOLON }
	'+'            { TokenADD }
	'-'            { TokenSUB }
	'*'            { TokenMULT }
	'/'            { TokenDIV }
	'%'            { TokenMOD }
	"=="           { TokenEQUAL }
	"!="           { TokenNEQUAL }
	'<'            { TokenLESS }
	"<="           { TokenLESSEQ }
	'>'            { TokenGREATER }
	">="           { TokenGREATEREQ }
	'('            { TokenLPAREN }
	')'            { TokenRPAREN }
	'{'            { TokenLBRACE }
	'}'            { TokenRBRACE }
	'='            { TokenASSIGN }
	if             { TokenIF }
	else           { TokenELSE }
	while          { TokenWHILE }
	return         { TokenRETURN }
	int            { TokenInt $$ }
	bool           { TokenBool $$ }
	id             { TokenIdent $$ }
	true           { TokenTrue }
	false          { TokenFalse }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Block           rules 1, 2
	Stmt            rules 3, 4, 5, 6, 7, 8
	Simple          rules 9, 10
	Types           rules 11, 12
	Exp             rules 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Block          goto state 12
	Stmt           goto state 2
	Simple         goto state 3
	Types          goto state 4

State 1


	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Stmt           goto state 2
	Simple         goto state 3
	Types          goto state 4

State 2

	Block -> Stmt .                                     (rule 1)

	'{'            reduce using rule 1
	'}'            reduce using rule 1
	if             reduce using rule 1
	while          reduce using rule 1
	return         reduce using rule 1
	int            reduce using rule 1
	bool           reduce using rule 1
	id             reduce using rule 1
	%eof           reduce using rule 1


State 3

	Stmt -> Simple . ';'                                (rule 3)

	';'            shift, and enter state 23


State 4

	Simple -> Types . id                                (rule 10)

	id             shift, and enter state 22


State 5

	Stmt -> '{' . Block '}'                             (rule 4)

	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Block          goto state 21
	Stmt           goto state 2
	Simple         goto state 3
	Types          goto state 4

State 6

	Stmt -> if . '(' Exp ')' Stmt else Stmt             (rule 5)
	Stmt -> if . '(' Exp ')' Stmt                       (rule 6)

	'('            shift, and enter state 20


State 7

	Stmt -> while . '(' Exp ')' Stmt                    (rule 7)

	'('            shift, and enter state 19


State 8

	Stmt -> return . Exp ';'                            (rule 8)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 15

State 9

	Types -> int .                                      (rule 11)

	id             reduce using rule 11


State 10

	Types -> bool .                                     (rule 12)

	id             reduce using rule 12


State 11

	Simple -> id . '=' Exp                              (rule 9)

	'='            shift, and enter state 14


State 12

	%start_parser -> Block .                            (rule 0)
	Block -> Block . Stmt                               (rule 2)

	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11
	%eof           accept

	Stmt           goto state 13
	Simple         goto state 3
	Types          goto state 4

State 13

	Block -> Block Stmt .                               (rule 2)

	'{'            reduce using rule 2
	'}'            reduce using rule 2
	if             reduce using rule 2
	while          reduce using rule 2
	return         reduce using rule 2
	int            reduce using rule 2
	bool           reduce using rule 2
	id             reduce using rule 2
	%eof           reduce using rule 2


State 14

	Simple -> id '=' . Exp                              (rule 9)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 40

State 15

	Stmt -> return Exp . ';'                            (rule 8)
	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            shift, and enter state 28
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39


State 16

	Exp -> '(' . Exp ')'                                (rule 26)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 27

State 17

	Exp -> true .                                       (rule 13)

	';'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'%'            reduce using rule 13
	"=="           reduce using rule 13
	"!="           reduce using rule 13
	'<'            reduce using rule 13
	"<="           reduce using rule 13
	'>'            reduce using rule 13
	">="           reduce using rule 13
	')'            reduce using rule 13


State 18

	Exp -> false .                                      (rule 14)

	';'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'%'            reduce using rule 14
	"=="           reduce using rule 14
	"!="           reduce using rule 14
	'<'            reduce using rule 14
	"<="           reduce using rule 14
	'>'            reduce using rule 14
	">="           reduce using rule 14
	')'            reduce using rule 14


State 19

	Stmt -> while '(' . Exp ')' Stmt                    (rule 7)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 26

State 20

	Stmt -> if '(' . Exp ')' Stmt else Stmt             (rule 5)
	Stmt -> if '(' . Exp ')' Stmt                       (rule 6)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 25

State 21

	Block -> Block . Stmt                               (rule 2)
	Stmt -> '{' Block . '}'                             (rule 4)

	'{'            shift, and enter state 5
	'}'            shift, and enter state 24
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Stmt           goto state 13
	Simple         goto state 3
	Types          goto state 4

State 22

	Simple -> Types id .                                (rule 10)

	';'            reduce using rule 10


State 23

	Stmt -> Simple ';' .                                (rule 3)

	'{'            reduce using rule 3
	'}'            reduce using rule 3
	if             reduce using rule 3
	else           reduce using rule 3
	while          reduce using rule 3
	return         reduce using rule 3
	int            reduce using rule 3
	bool           reduce using rule 3
	id             reduce using rule 3
	%eof           reduce using rule 3


State 24

	Stmt -> '{' Block '}' .                             (rule 4)

	'{'            reduce using rule 4
	'}'            reduce using rule 4
	if             reduce using rule 4
	else           reduce using rule 4
	while          reduce using rule 4
	return         reduce using rule 4
	int            reduce using rule 4
	bool           reduce using rule 4
	id             reduce using rule 4
	%eof           reduce using rule 4


State 25

	Stmt -> if '(' Exp . ')' Stmt else Stmt             (rule 5)
	Stmt -> if '(' Exp . ')' Stmt                       (rule 6)
	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39
	')'            shift, and enter state 54


State 26

	Stmt -> while '(' Exp . ')' Stmt                    (rule 7)
	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39
	')'            shift, and enter state 53


State 27

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)
	Exp -> '(' Exp . ')'                                (rule 26)

	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39
	')'            shift, and enter state 52


State 28

	Stmt -> return Exp ';' .                            (rule 8)

	'{'            reduce using rule 8
	'}'            reduce using rule 8
	if             reduce using rule 8
	else           reduce using rule 8
	while          reduce using rule 8
	return         reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	id             reduce using rule 8
	%eof           reduce using rule 8


State 29

	Exp -> Exp '+' . Exp                                (rule 15)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 51

State 30

	Exp -> Exp '-' . Exp                                (rule 16)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 50

State 31

	Exp -> Exp '*' . Exp                                (rule 17)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 49

State 32

	Exp -> Exp '/' . Exp                                (rule 18)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 48

State 33

	Exp -> Exp '%' . Exp                                (rule 19)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 47

State 34

	Exp -> Exp "==" . Exp                               (rule 20)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 46

State 35

	Exp -> Exp "!=" . Exp                               (rule 21)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 45

State 36

	Exp -> Exp '<' . Exp                                (rule 22)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 44

State 37

	Exp -> Exp "<=" . Exp                               (rule 23)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 43

State 38

	Exp -> Exp '>' . Exp                                (rule 24)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 42

State 39

	Exp -> Exp ">=" . Exp                               (rule 25)

	'('            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18

	Exp            goto state 41

State 40

	Simple -> id '=' Exp .                              (rule 9)
	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 9
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           shift, and enter state 34
	"!="           shift, and enter state 35
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39


State 41

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)
	Exp -> Exp ">=" Exp .                               (rule 25)

	';'            reduce using rule 25
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 25
	"!="           reduce using rule 25
	'<'            reduce using rule 25
	"<="           reduce using rule 25
	'>'            reduce using rule 25
	">="           reduce using rule 25
	')'            reduce using rule 25


State 42

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp '>' Exp .                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 24
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 24
	"!="           reduce using rule 24
	'<'            reduce using rule 24
	"<="           reduce using rule 24
	'>'            reduce using rule 24
	">="           reduce using rule 24
	')'            reduce using rule 24


State 43

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp "<=" Exp .                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 23
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 23
	"!="           reduce using rule 23
	'<'            reduce using rule 23
	"<="           reduce using rule 23
	'>'            reduce using rule 23
	">="           reduce using rule 23
	')'            reduce using rule 23


State 44

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp '<' Exp .                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 22
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 22
	"!="           reduce using rule 22
	'<'            reduce using rule 22
	"<="           reduce using rule 22
	'>'            reduce using rule 22
	">="           reduce using rule 22
	')'            reduce using rule 22


State 45

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp "!=" Exp .                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 21
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 21
	"!="           reduce using rule 21
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39
	')'            reduce using rule 21


State 46

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp "==" Exp .                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 20
	'+'            shift, and enter state 29
	'-'            shift, and enter state 30
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 20
	"!="           reduce using rule 20
	'<'            shift, and enter state 36
	"<="           shift, and enter state 37
	'>'            shift, and enter state 38
	">="           shift, and enter state 39
	')'            reduce using rule 20


State 47

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp '%' Exp .                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'%'            reduce using rule 19
	"=="           reduce using rule 19
	"!="           reduce using rule 19
	'<'            reduce using rule 19
	"<="           reduce using rule 19
	'>'            reduce using rule 19
	">="           reduce using rule 19
	')'            reduce using rule 19


State 48

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp '/' Exp .                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 18
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'%'            reduce using rule 18
	"=="           reduce using rule 18
	"!="           reduce using rule 18
	'<'            reduce using rule 18
	"<="           reduce using rule 18
	'>'            reduce using rule 18
	">="           reduce using rule 18
	')'            reduce using rule 18


State 49

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp '*' Exp .                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	'%'            reduce using rule 17
	"=="           reduce using rule 17
	"!="           reduce using rule 17
	'<'            reduce using rule 17
	"<="           reduce using rule 17
	'>'            reduce using rule 17
	">="           reduce using rule 17
	')'            reduce using rule 17


State 50

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp '-' Exp .                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 16
	"!="           reduce using rule 16
	'<'            reduce using rule 16
	"<="           reduce using rule 16
	'>'            reduce using rule 16
	">="           reduce using rule 16
	')'            reduce using rule 16


State 51

	Exp -> Exp . '+' Exp                                (rule 15)
	Exp -> Exp '+' Exp .                                (rule 15)
	Exp -> Exp . '-' Exp                                (rule 16)
	Exp -> Exp . '*' Exp                                (rule 17)
	Exp -> Exp . '/' Exp                                (rule 18)
	Exp -> Exp . '%' Exp                                (rule 19)
	Exp -> Exp . "==" Exp                               (rule 20)
	Exp -> Exp . "!=" Exp                               (rule 21)
	Exp -> Exp . '<' Exp                                (rule 22)
	Exp -> Exp . "<=" Exp                               (rule 23)
	Exp -> Exp . '>' Exp                                (rule 24)
	Exp -> Exp . ">=" Exp                               (rule 25)

	';'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            shift, and enter state 31
	'/'            shift, and enter state 32
	'%'            shift, and enter state 33
	"=="           reduce using rule 15
	"!="           reduce using rule 15
	'<'            reduce using rule 15
	"<="           reduce using rule 15
	'>'            reduce using rule 15
	">="           reduce using rule 15
	')'            reduce using rule 15


State 52

	Exp -> '(' Exp ')' .                                (rule 26)

	';'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'%'            reduce using rule 26
	"=="           reduce using rule 26
	"!="           reduce using rule 26
	'<'            reduce using rule 26
	"<="           reduce using rule 26
	'>'            reduce using rule 26
	">="           reduce using rule 26
	')'            reduce using rule 26


State 53

	Stmt -> while '(' Exp ')' . Stmt                    (rule 7)

	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Stmt           goto state 56
	Simple         goto state 3
	Types          goto state 4

State 54

	Stmt -> if '(' Exp ')' . Stmt else Stmt             (rule 5)
	Stmt -> if '(' Exp ')' . Stmt                       (rule 6)

	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Stmt           goto state 55
	Simple         goto state 3
	Types          goto state 4

State 55

	Stmt -> if '(' Exp ')' Stmt . else Stmt             (rule 5)
	Stmt -> if '(' Exp ')' Stmt .                       (rule 6)

	'{'            reduce using rule 6
	'}'            reduce using rule 6
	if             reduce using rule 6
	else           shift, and enter state 57
			(reduce using rule 6)

	while          reduce using rule 6
	return         reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	id             reduce using rule 6
	%eof           reduce using rule 6


State 56

	Stmt -> while '(' Exp ')' Stmt .                    (rule 7)

	'{'            reduce using rule 7
	'}'            reduce using rule 7
	if             reduce using rule 7
	else           reduce using rule 7
	while          reduce using rule 7
	return         reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	id             reduce using rule 7
	%eof           reduce using rule 7


State 57

	Stmt -> if '(' Exp ')' Stmt else . Stmt             (rule 5)

	'{'            shift, and enter state 5
	if             shift, and enter state 6
	while          shift, and enter state 7
	return         shift, and enter state 8
	int            shift, and enter state 9
	bool           shift, and enter state 10
	id             shift, and enter state 11

	Stmt           goto state 58
	Simple         goto state 3
	Types          goto state 4

State 58

	Stmt -> if '(' Exp ')' Stmt else Stmt .             (rule 5)

	'{'            reduce using rule 5
	'}'            reduce using rule 5
	if             reduce using rule 5
	else           reduce using rule 5
	while          reduce using rule 5
	return         reduce using rule 5
	int            reduce using rule 5
	bool           reduce using rule 5
	id             reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 27
Number of terminals: 26
Number of non-terminals: 6
Number of states: 59
